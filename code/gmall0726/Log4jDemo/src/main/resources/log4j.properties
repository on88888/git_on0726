



#固定的前缀，可以参考PropertyConfigurator中定义的常量
#声明appender   每个key都由两部分组成     固定的前缀.自定义的内容=value
#OGNL表达式，被翻译为java代码
#  Appender  myappender1 = new org.apache.log4j.ConsoleAppender()
log4j.appender.myappender1=org.apache.log4j.ConsoleAppender

# myappender1.setTarget(System.err)   为appender设置使用错误流输出
#log4j.appender.myappender1.target=System.err

#设置在控制台打印的每一行的样式
#    Layout layount = new PatternLayout()
# myappender1.setLayout(layount)
log4j.appender.myappender1.layout=org.apache.log4j.PatternLayout

#  默认layount对象的样式是： %m%n
#  %m: 输出你的消息  %n:代表换行
# 输出  日期 全类名:方法名 级别 消息 换行
#  %d{ yyyy-MM-dd HH:mm:ss} %c:%M %p %m%n
log4j.appender.myappender1.layout.ConversionPattern=%d{ yyyy-MM-dd HH:mm:ss} %c:%M %p %m%n




#向文件中输出日志的appender,还是用%d{ yyyy-MM-dd HH:mm:ss} %c:%M %p %m%n样式
log4j.appender.myappender2=org.apache.log4j.FileAppender
log4j.appender.myappender2.File=d:\\tmp\\hello.txt
log4j.appender.myappender2.layout=org.apache.log4j.PatternLayout
log4j.appender.myappender2.layout.ConversionPattern=%d{ yyyy-MM-dd HH:mm:ss} %c:%M %p %m%n



#打印策略  哪些类的Logger，使用什么级别，使用什么appender去打印
log4j.logger.com.atguigu.logger.Log4jDemo1=debug,myappender1,myappender2

#所有类都希望使用统一的策略
log4j.rootLogger=debug,myappender2

log4j.logger.com.atguigu.logger.Log4jDemo2=error,myappender2,myappender1



#但是Log4jDemo1用自己的策略.Log4jDemo1的策略和rootLogger不叠加使用！我用自己的！
log4j.additivity.com.atguigu.logger.Log4jDemo1=false


