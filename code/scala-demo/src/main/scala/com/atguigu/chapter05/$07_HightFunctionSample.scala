package com.atguigu.chapter05

object $07_HightFunctionSample {


  /**
    * 高阶函数的简化[调用高阶函数的时候简化]:
    *   1、可以直接传递函数的值
    *   2、函数的参数类型可以省略
    *   3、如果函数的参数在函数体中只使用了一次,那么可以用_代替
    *       注意,一下三种情况不能用_简化:
    *             1、如果函数的参数使用顺序与定义顺序不一致,此时不能用_简化 【第N个下划线代表函数第N个参数】<只针对函数有多个参数的情况>
    *             2、如果函数体中有嵌套,函数的参数在嵌套中以表达式的形式存在,此时不能用_简化 <针对函数体中有嵌套的情况>
    *             3、如果函数只有一个参数,在函数体中没有任何操作直接返回参数的时候,此时不能用_简化 <只针对函数只有一个参数的情况>
    *   4、如果函数只有一个参数,函数的参数列表的()可以省略
    */
  def main(args: Array[String]): Unit = {

    val func = (x:Int,y:Int)=> x*y

    println(add(10, 20, func))
    //1、可以直接传递函数的值
    println(add(10, 20, (x: Int, y: Int) => x * y))
    //2、函数的参数类型可以省略
    println(add(10, 20, (x, y) => x * y))
    //3、如果函数的参数在函数体中只使用了一次,那么可以用_代替
    println(add(10, 20, _ * _ ))
    //3.1、如果函数的参数使用顺序与定义顺序不一致,此时不能用_简化 【第N个下划线代表函数第N个参数】
    println(add(10, 20, (x, y) => y-x))
    println(add(10, 20, _-_))

    //3.2、如果函数体中有嵌套,函数的参数在嵌套中以表达式的形式存在,此时不能用_简化
    println(add(10,20, (x,y)=> (x+1)*y ) )
    //println(add(10,20,(_+1)*_ ) )

    val f1 = (x:Int) => x
    m1(10,f1)
    m1(10,(x:Int) => x)
    m1(10,(x) => x)
    //3.3、如果函数只有一个参数,在函数体中没有任何操作直接返回参数的时候,此时不能用_简化
    //val func = m1(10, _)

    //4、如果函数只有一个参数,函数的参数列表的()可以省略
    m1(10,x => x)

  }

  def add(x:Int,y:Int, func: (Int,Int)=>Int) = func(x,y)

  def m1(x:Int , func: Int=>Int) =  func(x)
}
